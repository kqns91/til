package generator

import (
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"text/template"

	"github.com/Masterminds/sprig/v3"
)

const methodTemplate = `
// Code generated by mygenerator; DO NOT EDIT.
package {{.PackageName}}

{{range $v := .Structs}}
// New{{$v.Name}} creates a new {{$v.Name}}.
func New{{$v.Name}}({{$v.Params}}) *{{$v.Name}} {
	return &{{$v.Name}}{
		{{$v.Assignments}},
	}
}
{{range $v.Fields}}
// {{.Name|title}} returns the {{.Name}} field of the {{$v.Name}}.{{.Name}}.
func ({{$v.Name|lower|initials}} *{{$v.Name}}) {{.Name|title}}() {{.Type}} {
	return {{$v.Name|lower|initials}}.{{.Name}}
}
{{end}}
{{end}}
`

type StructInfo struct {
	Name        string
	Fields      []FieldInfo
	Params      string
	Assignments string
}

type FieldInfo struct {
	Name string
	Type string
}

func Run() {
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, "main.go", nil, parser.ParseComments)
	if err != nil {
		log.Fatalf("Failed to parse file: %s", err)
	}

	var structs []StructInfo
	for _, decl := range node.Decls {
		if genDecl, ok := decl.(*ast.GenDecl); ok {
			for _, spec := range genDecl.Specs {
				if typeSpec, ok := spec.(*ast.TypeSpec); ok {
					if structType, ok := typeSpec.Type.(*ast.StructType); ok {
						var fields []FieldInfo
						var params []string
						var assignments []string

						for _, field := range structType.Fields.List {
							fieldName := field.Names[0].Name
							fieldType := fieldTypeToString(field.Type)
							fields = append(fields, FieldInfo{Name: fieldName, Type: fieldType})
							params = append(params, fieldName+" "+fieldType)
							assignments = append(assignments, fieldName+": "+fieldName)
						}

						structs = append(structs, StructInfo{
							Name:        typeSpec.Name.Name,
							Fields:      fields,
							Params:      join(params, ", "),
							Assignments: join(assignments, ",\n\t\t"),
						})
					}
				}
			}
		}
	}

	tmpl, err := template.New("base").Funcs(sprig.FuncMap()).Parse(methodTemplate)
	if err != nil {
		log.Fatalf("Failed to parse template: %s", err)
	}

	file, err := os.Create("methods_gen.go")
	if err != nil {
		log.Fatalf("Failed to create file: %s", err)
	}
	defer file.Close()

	err = tmpl.Execute(file, struct {
		PackageName string
		Structs     []StructInfo
	}{
		PackageName: node.Name.Name,
		Structs:     structs,
	})
	if err != nil {
		log.Fatalf("Failed to execute template: %s", err)
	}
}

func fieldTypeToString(expr ast.Expr) string {
	switch t := expr.(type) {
	case *ast.Ident:
		return t.Name
	case *ast.StarExpr:
		return "*" + fieldTypeToString(t.X)
	case *ast.SelectorExpr:
		return fieldTypeToString(t.X) + "." + t.Sel.Name
	default:
		return "unknown"
	}
}

func join(elems []string, sep string) string {
	if len(elems) == 0 {
		return ""
	}
	result := elems[0]
	for _, elem := range elems[1:] {
		result += sep + elem
	}
	return result
}
